#!/usr/bin/env php
<?php

if ((! @include __DIR__.'/../../../autoload.php') && (! @include __DIR__.'/../vendor/autoload.php')) {
    die('You must set up the project dependencies, run the following commands:' . PHP_EOL .
         'curl -s http://getcomposer.org/installer | php' . PHP_EOL .
         'php composer.phar install' . PHP_EOL
    );
}

use Symfony\Component\Console\Application;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Finder\Finder;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\Process\Process;
use Michelf\MarkdownExtra;

$console = new Application;
$console
  ->register('generate')
  ->addArgument(
    'src',
    InputArgument::REQUIRED,
    'Location of invoice; ex: "paid", "unpaid"'
  )
  ->addOption(
    'format',
    null,
    InputOption::VALUE_OPTIONAL,
    'Output to format; HTML or PDF',
    'pdf'
  )
  ->addOption(
    'out',
    null,
    InputOption::VALUE_OPTIONAL,
    'Output HTML or PDF to what directory (absolute directory path)',
    sys_get_temp_dir()
  )
  ->addOption(
    'layout',
    null,
    InputOption::VALUE_OPTIONAL,
    'Output HTML or PDF to what directory (absolute directory path)',
    __DIR__.'/../invoices/layout.html'
  )
  ->setDescription('Generates HTML versions of a Markdown Invoice.')
  ->setCode(function(InputInterface $input, OutputInterface $output) use($console) {
      # Grab the arguments passed
      $args = [
        'format'  => $input->getOption('format'),
        'out'     => $input->getOption('out'),
        'layout'  => $input->getOption('layout'),
        'src'     => $input->getArgument('src')
      ];

      $filesystem  = new Filesystem;
      $invoice_dir = __DIR__."/../invoices/{$args['src']}/";

      $output->writeln('');

      $finder = new Finder;
      $finder->files()->in($invoice_dir);
      foreach ($finder as $file) {
        if (in_array($file->getExtension(), ['md', 'markdown'])) {
          $files[] = str_replace(['.md', '.markdown'], '', $file->getBasename());
        }
      }

      # Display the choices of invoices to pick from
      $dialog  = $console->getHelperSet()->get('dialog');
      $invoice = $dialog->select($output, 'Invoice number: ', $files, 0);

      $output->writeln('');
      $output->writeln("<comment>Generating for invoice \"{$files[$invoice]}\"...</comment>");

      # Setup the invoice's absolute path and its saving path
      $invoice_path = "{$invoice_dir}{$files[$invoice]}.md";
      $save_path    = "{$args['out']}/{$files[$invoice]}.html";

      if (! $filesystem->exists($invoice_path)) {
        $output->writeln("<error>Invoice \"{$files[$invoice]}\" does not seem to exit under \"{$args['src']}\".</error>");
        exit;
      }

      # Open the layout file and paste in the parsed Markdown->HTML inside
      if (! $filesystem->exists($args['layout'])) {
        $output->writeln("<error>Layout file does not seem to exit for \"{$args['layout']}\".</error>");
        exit;
      }

      $layout_html = str_replace(
        '{{ html }}',
        MarkdownExtra::defaultTransform(file_get_contents($invoice_path)),
        file_get_contents($args['layout'])
      );
      file_put_contents($save_path, $layout_html);

      $output->writeln('');
      $output->writeln("<info>Invoice compiled to HTML.</info>");
      $output->writeln("<info>HTML saved to: {$save_path}</info>");

      if ($args['format'] ==  'pdf') {
        # Save HTML to PDF if PDF format was chosen
        $pdf_save_path = substr_replace($save_path, 'pdf', strlen($save_path)-4, 4);

        $process = new Process("wkhtmltopdf {$save_path} {$pdf_save_path}");
        $process->run();
        if (! $process->isSuccessful()) {
          throw new \RuntimeException($process->getErrorOutput());
        }

        $output->writeln("<info>PDF saved to: {$pdf_save_path}</info>");
      }
  });
$console->run();
